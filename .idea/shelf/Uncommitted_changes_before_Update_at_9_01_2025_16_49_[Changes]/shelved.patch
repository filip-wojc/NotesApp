Index: app/src/main/java/com/example/notesapp/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesapp.di\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport androidx.room.Room\r\nimport com.example.notesapp.database.NoteDatabase\r\nimport com.example.notesapp.database.repositories.CategoryRepositoryImpl\r\nimport com.example.notesapp.database.repositories.NoteRepositoryImpl\r\nimport com.example.notesapp.database.repositories.PriorityRepositoryImpl\r\nimport com.example.notesapp.domain.repositories.CategoryRepository\r\nimport com.example.notesapp.domain.repositories.NoteRepository\r\nimport com.example.notesapp.domain.repositories.PriorityRepository\r\nimport com.example.notesapp.domain.use_cases.categories.CategoryUseCases\r\nimport com.example.notesapp.domain.use_cases.categories.DeleteCategoryUseCase\r\nimport com.example.notesapp.domain.use_cases.categories.GetAllCategoriesUseCase\r\nimport com.example.notesapp.domain.use_cases.categories.GetCategoryByIdUseCase\r\nimport com.example.notesapp.domain.use_cases.categories.UpsertCategoryUseCase\r\nimport com.example.notesapp.domain.use_cases.notes.DeleteNoteUseCase\r\nimport com.example.notesapp.domain.use_cases.notes.GetAllNotesUseCase\r\nimport com.example.notesapp.domain.use_cases.notes.GetNoteByIdUseCase\r\nimport com.example.notesapp.domain.use_cases.notes.GetNotesByCategoryIdUseCase\r\nimport com.example.notesapp.domain.use_cases.notes.NoteUseCases\r\nimport com.example.notesapp.domain.use_cases.notes.UpsertNoteUseCase\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.android.qualifiers.ApplicationContext\r\nimport dagger.hilt.components.SingletonComponent\r\nimport javax.inject.Singleton\r\n\r\n@Module\r\n@InstallIn(SingletonComponent::class)\r\nobject AppModule {\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideNoteDatabase(\r\n         @ApplicationContext app: Context\r\n    ): NoteDatabase {\r\n        return Room.databaseBuilder(\r\n            app,\r\n            NoteDatabase::class.java,\r\n            NoteDatabase.DATABASE_NAME\r\n        ).build()\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideNoteRepository(db: NoteDatabase): NoteRepository {\r\n        return NoteRepositoryImpl(db.noteDao)\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideCategoryRepository(db: NoteDatabase): CategoryRepository {\r\n        return CategoryRepositoryImpl(db.categoryDao)\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun providePriorityRepository(db: NoteDatabase): PriorityRepository {\r\n        return PriorityRepositoryImpl(db.priorityDao)\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideNoteUseCases(repository: NoteRepository): NoteUseCases {\r\n        return NoteUseCases(\r\n            getAllNotes = GetAllNotesUseCase(repository),\r\n            getNotesByCategory = GetNotesByCategoryIdUseCase(repository),\r\n            getNote = GetNoteByIdUseCase(repository),\r\n            upsertNote = UpsertNoteUseCase(repository),\r\n            deleteNotes = DeleteNoteUseCase(repository),\r\n        )\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideCategoryUseCases(repository: CategoryRepository) : CategoryUseCases {\r\n        return CategoryUseCases(\r\n            getAllCategories = GetAllCategoriesUseCase(repository),\r\n            getCategoryById = GetCategoryByIdUseCase(repository),\r\n            upsertCategory = UpsertCategoryUseCase(repository),\r\n            deleteCategory = DeleteCategoryUseCase(repository)\r\n        )\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/notesapp/di/AppModule.kt b/app/src/main/java/com/example/notesapp/di/AppModule.kt
--- a/app/src/main/java/com/example/notesapp/di/AppModule.kt	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/app/src/main/java/com/example/notesapp/di/AppModule.kt	(date 1736433579837)
@@ -3,6 +3,7 @@
 import android.app.Application
 import android.content.Context
 import androidx.room.Room
+import androidx.room.migration.Migration
 import com.example.notesapp.database.NoteDatabase
 import com.example.notesapp.database.repositories.CategoryRepositoryImpl
 import com.example.notesapp.database.repositories.NoteRepositoryImpl
Index: app/src/main/java/com/example/notesapp/presentation/Notes/NotesViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesapp.presentation.notes\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Log\r\nimport androidx.compose.runtime.State\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.notesapp.domain.models.Category\r\nimport com.example.notesapp.domain.models.Note\r\nimport com.example.notesapp.domain.use_cases.categories.CategoryUseCases\r\nimport com.example.notesapp.domain.use_cases.notes.NoteUseCases\r\nimport com.example.notesapp.domain.utils.NoteOrder\r\nimport com.example.notesapp.domain.utils.OrderType\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.launch\r\nimport java.time.Instant\r\nimport java.time.LocalDateTime\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass NotesViewModel @Inject constructor(\r\n    private val _noteUseCases: NoteUseCases,\r\n    private val _categoryUseCases: CategoryUseCases\r\n) : ViewModel() {\r\n    private val _notes = MutableStateFlow<List<Note>>(emptyList())\r\n    val notes: StateFlow<List<Note>> = _notes\r\n\r\n    private val _allNotes = MutableStateFlow<List<Note>>(emptyList())\r\n\r\n    private val _isSearchBarVisible = MutableStateFlow(false)\r\n    val isSearchBarVisible : StateFlow<Boolean> = _isSearchBarVisible\r\n\r\n    private val _searchText = MutableStateFlow(\"\")\r\n    val searchText : StateFlow<String> = _searchText\r\n\r\n    private val _currentSortMethod = MutableStateFlow(\"Date\")\r\n    val currentSortMethod : StateFlow<String> = _currentSortMethod\r\n\r\n    private val _isSortMethodVisible = MutableStateFlow(false)\r\n    val isSortMethodVisible : StateFlow<Boolean> = _isSortMethodVisible\r\n\r\n    private val _isOrderDescending = MutableStateFlow(true)\r\n    val isOrderDescending : StateFlow<Boolean> = _isOrderDescending\r\n\r\n    private val _isDeleting = MutableStateFlow(false)\r\n    val isDeleting : StateFlow<Boolean> = _isDeleting\r\n\r\n    private val _categories = MutableStateFlow<List<Category>>(emptyList())\r\n    val categories: StateFlow<List<Category>> = _categories\r\n\r\n    private val _defaultCategory = Category(\"All Notes\", 0)\r\n\r\n    private val _currentCategory = MutableStateFlow(_defaultCategory)\r\n    val currentCategory : StateFlow<Category> = _currentCategory\r\n\r\n    init {\r\n        getNotes()\r\n        getCategories()\r\n    }\r\n\r\n\r\n    fun getNotes(){\r\n        viewModelScope.launch{\r\n            _noteUseCases.getAllNotes(\r\n                noteOrder = gerOrderType()\r\n            ).collect { noteList ->\r\n                _notes.value = noteList\r\n                _allNotes.value = noteList\r\n                searchBarOnValueChange(_searchText.value)\r\n                _currentCategory.value = _defaultCategory\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getCategories() {\r\n        viewModelScope.launch {\r\n            _categoryUseCases.getAllCategories().collect { categoryList ->\r\n                _categories.value = categoryList\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getNotesByCategory(category: Category) {\r\n        viewModelScope.launch {\r\n            _noteUseCases.getNotesByCategory(\r\n                noteOrder = gerOrderType(),\r\n                categoryId = category.categoryId\r\n            ).collect { noteList ->\r\n                _notes.value = noteList\r\n                _allNotes.value = noteList\r\n                searchBarOnValueChange(_searchText.value)\r\n                _currentCategory.value = category\r\n            }\r\n        }\r\n    }\r\n\r\n    fun toggleSearchBarVisibility() {\r\n        _isSearchBarVisible.value = !_isSearchBarVisible.value\r\n    }\r\n\r\n    fun toggleSortMethodsVisibility() {\r\n        _isSortMethodVisible.value = !_isSortMethodVisible.value\r\n    }\r\n\r\n    fun toggleDeleting() {\r\n        _isDeleting.value = !_isDeleting.value\r\n    }\r\n\r\n    fun toggleSortDirection() {\r\n        _isOrderDescending.value = !_isOrderDescending.value\r\n        if (_currentCategory.value.name != \"All Notes\") {\r\n            getNotesByCategory(_currentCategory.value)\r\n        }\r\n        else {\r\n            getNotes()\r\n        }\r\n    }\r\n\r\n    fun searchBarOnValueChange(value: String) {\r\n        _searchText.value = value\r\n        if (value.isNotEmpty()) {\r\n            _notes.value =\r\n                _allNotes.value.filter {\r\n                    it.title.contains(value, ignoreCase = true) || it.content.contains(value, ignoreCase = true)\r\n        }\r\n        } else {\r\n            _notes.value = _allNotes.value\r\n        }\r\n    }\r\n\r\n    fun deleteNote(note: Note) {\r\n        viewModelScope.launch {\r\n            _noteUseCases.deleteNotes(note)\r\n            if (_currentCategory.value.name != \"All Notes\") {\r\n                getNotesByCategory(_currentCategory.value)\r\n            }\r\n            else {\r\n                getNotes()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun onSelectedSort(sortMethod: String) {\r\n        _currentSortMethod.value = sortMethod\r\n        if (_currentCategory.value.name != \"All Notes\") {\r\n            getNotesByCategory(_currentCategory.value)\r\n        }\r\n        else {\r\n            getNotes()\r\n        }\r\n    }\r\n\r\n    private fun gerOrderType() : NoteOrder {\r\n        return if (_isOrderDescending.value) {\r\n            when (_currentSortMethod.value) {\r\n                \"Date\" -> return NoteOrder.Date(OrderType.Descending)\r\n                \"Title\" -> return NoteOrder.Title(OrderType.Descending)\r\n                \"Category\" -> return NoteOrder.Category(OrderType.Descending)\r\n                \"Priority\" -> return NoteOrder.Priority(OrderType.Descending)\r\n                \"Color\" -> return NoteOrder.Color(OrderType.Descending)\r\n                else -> NoteOrder.Date(OrderType.Descending)\r\n            }\r\n        }\r\n        else {\r\n            when (_currentSortMethod.value) {\r\n                \"Date\" -> NoteOrder.Date(OrderType.Ascending)\r\n                \"Title\" -> NoteOrder.Title(OrderType.Ascending)\r\n                \"Category\" -> NoteOrder.Category(OrderType.Ascending)\r\n                \"Priority\" -> NoteOrder.Priority(OrderType.Ascending)\r\n                \"Color\" -> NoteOrder.Color(OrderType.Ascending)\r\n                else -> NoteOrder.Date(OrderType.Ascending)\r\n            }\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"NewApi\")\r\n    fun formatTimeStamp(timestamp: Long) : String {\r\n        val localDateTime = LocalDateTime.ofInstant(\r\n            Instant.ofEpochMilli(timestamp),\r\n            ZoneId.systemDefault()\r\n        )\r\n        val formatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\")\r\n        return localDateTime.format(formatter)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/notesapp/presentation/Notes/NotesViewModel.kt b/app/src/main/java/com/example/notesapp/presentation/Notes/NotesViewModel.kt
--- a/app/src/main/java/com/example/notesapp/presentation/Notes/NotesViewModel.kt	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/app/src/main/java/com/example/notesapp/presentation/Notes/NotesViewModel.kt	(date 1736357355144)
@@ -1,12 +1,21 @@
 package com.example.notesapp.presentation.notes
 
+import android.Manifest
 import android.annotation.SuppressLint
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Build
+import android.os.Environment
+import android.provider.Settings
 import android.util.Log
 import androidx.compose.runtime.State
 import androidx.compose.runtime.mutableStateListOf
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.toArgb
+import androidx.core.app.ActivityCompat
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import com.example.notesapp.domain.models.Category
Index: app/src/main/java/com/example/notesapp/presentation/Notes/NotesScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesapp.presentation.notes\r\nimport android.util.Log\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport com.example.notesapp.presentation.notes.composables.TopBar\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material.icons.filled.Menu\r\nimport androidx.compose.material.icons.filled.Settings\r\nimport androidx.compose.material3.Divider\r\nimport androidx.compose.material3.DrawerValue\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.HorizontalDivider\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalDrawerSheet\r\nimport androidx.compose.material3.ModalNavigationDrawer\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberDrawerState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.zIndex\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.example.notesapp.R\r\nimport com.example.notesapp.domain.models.Category\r\nimport com.example.notesapp.presentation.CreateNoteScreen\r\nimport com.example.notesapp.presentation.notes.NotesViewModel\r\nimport com.example.notesapp.presentation.notes.composables.NotePreview\r\nimport com.example.notesapp.presentation.notes.composables.SearchingBar\r\nimport com.example.notesapp.presentation.notes.composables.SortMethodList\r\nimport com.example.notesapp.ui.theme.Background\r\nimport com.example.notesapp.ui.theme.LightYellow\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun NotesScreen(\r\n    viewModel: NotesViewModel = hiltViewModel(),\r\n    navController: NavController\r\n) {\r\n    val notes = viewModel.notes.collectAsState()\r\n    val isDeleting = viewModel.isDeleting.collectAsState()\r\n    val searchText = viewModel.searchText.collectAsState()\r\n    val currentSortMethod = viewModel.currentSortMethod.collectAsState()\r\n    val isOrderDescending = viewModel.isOrderDescending.collectAsState()\r\n    val isSearchBarVisible = viewModel.isSearchBarVisible.collectAsState()\r\n    val isSortMethodsVisible = viewModel.isSortMethodVisible.collectAsState()\r\n    val categories = viewModel.categories.collectAsState()\r\n    val currentCategory = viewModel.currentCategory.collectAsState()\r\n\r\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    ModalNavigationDrawer(\r\n        drawerState = drawerState,\r\n        drawerContent = {\r\n            ModalDrawerSheet (\r\n                modifier = Modifier.width(200.dp)\r\n            ){\r\n                Text(\r\n                    text = \"Categories\",\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    modifier = Modifier.padding(16.dp)\r\n                )\r\n                HorizontalDivider()\r\n                categories.value.forEach { category ->\r\n                    TextButton(\r\n                        onClick = {\r\n                            viewModel.getNotesByCategory(category)\r\n                            coroutineScope.launch { drawerState.close() }\r\n                        },\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    ) {\r\n                        Text(\r\n                            text = category.name,\r\n                            style = MaterialTheme.typography.bodyMedium\r\n                        )\r\n                    }\r\n                }\r\n                HorizontalDivider()\r\n                TextButton(\r\n                    onClick = {\r\n                        viewModel.getNotes()\r\n                        coroutineScope.launch { drawerState.close() }\r\n                    },\r\n                    modifier = Modifier.fillMaxWidth()\r\n                ) {\r\n                    Text(\r\n                        text = \"All Notes\",\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(Background),\r\n        ) {\r\n            TopBar(\r\n                currentFilter = currentCategory.value.name,\r\n                toggleDeleting = { viewModel.toggleDeleting() },\r\n                toggleMenuVisibility = {\r\n                    coroutineScope.launch { drawerState.open() }\r\n                },\r\n                toggleSearchBarVisibility = { viewModel.toggleSearchBarVisibility() },\r\n                isDeleting = isDeleting.value,\r\n                isSearching = isSearchBarVisible.value\r\n            )\r\n\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.End,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                IconButton(\r\n                    onClick = { viewModel.toggleSortMethodsVisibility() },\r\n                ) {\r\n                    Icon(\r\n                        painter = painterResource(R.drawable.baseline_sort_24),\r\n                        contentDescription = \"SortButton\",\r\n                    )\r\n                }\r\n                Text(\r\n                    text = currentSortMethod.value,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                )\r\n                IconButton(\r\n                    onClick = { viewModel.toggleSortDirection() },\r\n                ) {\r\n                    Icon(\r\n                        imageVector = if (isOrderDescending.value) Icons.Filled.KeyboardArrowDown else Icons.Filled.KeyboardArrowUp,\r\n                        contentDescription = \"SortButton\",\r\n                    )\r\n                }\r\n            }\r\n\r\n            AnimatedVisibility(\r\n                visible = isSortMethodsVisible.value,\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    SortMethodList(\r\n                        onSelectSort = { viewModel.onSelectedSort(it) },\r\n                        currentSort = currentSortMethod.value\r\n                    )\r\n                }\r\n            }\r\n\r\n            AnimatedVisibility(\r\n                visible = isSearchBarVisible.value,\r\n                enter = slideInVertically(),\r\n            ) {\r\n                SearchingBar(\r\n                    modifier = Modifier.padding(horizontal = 8.dp),\r\n                    value = searchText.value,\r\n                    onValueChange = { viewModel.searchBarOnValueChange(it) }\r\n                )\r\n            }\r\n\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .background(Background)\r\n            ) {\r\n                LazyColumn(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .padding(16.dp)\r\n                ) {\r\n                    items(notes.value.chunked(2)) { rowNotes ->\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(vertical = 8.dp),\r\n                            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            for (note in rowNotes) {\r\n                                NotePreview(\r\n                                    note = note,\r\n                                    noteFormattedDate = viewModel.formatTimeStamp(note.timestamp),\r\n                                    modifier = Modifier.weight(1f),\r\n                                    isDeleting = isDeleting.value,\r\n                                    onDelete = { viewModel.deleteNote(note) },\r\n                                    onClick = {navController.navigate(\"editNoteScreen/${note.noteId}\")}\r\n                                )\r\n                            }\r\n                            if (rowNotes.size < 2) {\r\n                                Spacer(modifier = Modifier.weight(1f))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                IconButton (\r\n                    onClick = {navController.navigate(CreateNoteScreen.route)},\r\n                    modifier = Modifier\r\n                        .align(Alignment.BottomEnd)\r\n                        .padding(48.dp)\r\n                        .background(Color.White, CircleShape)\r\n                        .zIndex(1f)\r\n                        .size(60.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.Add,\r\n                        contentDescription = \"Add note\",\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/notesapp/presentation/Notes/NotesScreen.kt b/app/src/main/java/com/example/notesapp/presentation/Notes/NotesScreen.kt
--- a/app/src/main/java/com/example/notesapp/presentation/Notes/NotesScreen.kt	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/app/src/main/java/com/example/notesapp/presentation/Notes/NotesScreen.kt	(date 1736357355138)
@@ -39,12 +39,14 @@
 import androidx.compose.material3.TextButton
 import androidx.compose.material3.rememberDrawerState
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.unit.dp
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-01-06T12:56:00.554791100Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\filip\\.android\\avd\\Medium_Phone_API_35.avd\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/.idea/deploymentTargetSelector.xml	(date 1736356670272)
@@ -4,10 +4,10 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-01-06T12:56:00.554791100Z">
+        <DropdownSelection timestamp="2025-01-08T17:14:56.334010Z">
           <Target type="DEFAULT_BOOT">
             <handle>
-              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\filip\.android\avd\Medium_Phone_API_35.avd" />
+              <DeviceId pluginId="PhysicalDevice" identifier="serial=a9aa21e" />
             </handle>
           </Target>
         </DropdownSelection>
Index: app/src/main/java/com/example/notesapp/presentation/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesapp.presentation\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport androidx.compose.material3.Text\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.navArgument\r\nimport com.example.notesapp.domain.models.Category\r\nimport com.example.notesapp.domain.models.Priority\r\nimport com.example.notesapp.domain.repositories.CategoryRepository\r\nimport com.example.notesapp.domain.repositories.PriorityRepository\r\nimport com.example.notesapp.presentation.CreateNote.CreateNoteScreen\r\nimport com.example.notesapp.presentation.notes.NotesScreen\r\nimport com.example.notesapp.ui.theme.NotesAppTheme\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.serialization.Serializable\r\nimport com.example.notesapp.presentation.EditNote.EditNoteScreen\r\n\r\n\r\n\r\n@AndroidEntryPoint\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContent {\r\n            NotesAppTheme {\r\n                val navController = rememberNavController()\r\n                NavHost(\r\n                    navController = navController,\r\n                    startDestination = NoteListScreen.route\r\n                ) {\r\n                    composable(\r\n                        route = NoteListScreen.route,\r\n                        enterTransition = {\r\n                            slideInHorizontally(\r\n                                initialOffsetX = { -300 },\r\n                                animationSpec = tween(durationMillis = 300)\r\n                            ) + fadeIn(animationSpec = tween(300))\r\n                        },\r\n                        exitTransition = {\r\n                            slideOutHorizontally(\r\n                                targetOffsetX = { -300 },\r\n                                animationSpec = tween(durationMillis = 300)\r\n                            ) + fadeOut(animationSpec = tween(300))\r\n                        }\r\n                    ) {\r\n                        NotesScreen(navController = navController)\r\n                    }\r\n\r\n                    composable(\r\n                        route = CreateNoteScreen.route,\r\n                        enterTransition = {\r\n                            slideInHorizontally(\r\n                                initialOffsetX = { 300 },\r\n                                animationSpec = tween(durationMillis = 300)\r\n                            ) + fadeIn(animationSpec = tween(300))\r\n                        },\r\n                        exitTransition = {\r\n                            slideOutHorizontally(\r\n                                targetOffsetX = { -300 },\r\n                                animationSpec = tween(durationMillis = 300)\r\n                            ) + fadeOut(animationSpec = tween(300))\r\n                        }\r\n                    ) {\r\n                        CreateNoteScreen(navController = navController)\r\n                    }\r\n\r\n                    composable(\r\n                        route = EditNoteScreen.route,\r\n                        arguments = listOf(navArgument(\"noteId\") { type = NavType.IntType }) // Specify argument type\r\n                    ) { backStackEntry ->\r\n                        val noteId = backStackEntry.arguments?.getInt(\"noteId\") ?: 0 // Retrieve argument\r\n                        EditNoteScreen(\r\n                            navController = navController,\r\n                            noteId = noteId\r\n                        ) // Pass it to the screen\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Serializable\r\nobject NoteListScreen {\r\n    const val route = \"noteListScreen\"\r\n}\r\n\r\n@Serializable\r\nobject CreateNoteScreen {\r\n    const val route = \"createNoteScreen\"\r\n}\r\n\r\n@Serializable\r\nobject EditNoteScreen {\r\n    const val route = \"editNoteScreen/{noteId}\" // Argument placeholder\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/notesapp/presentation/MainActivity.kt b/app/src/main/java/com/example/notesapp/presentation/MainActivity.kt
--- a/app/src/main/java/com/example/notesapp/presentation/MainActivity.kt	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/app/src/main/java/com/example/notesapp/presentation/MainActivity.kt	(date 1736357355148)
@@ -1,6 +1,12 @@
 package com.example.notesapp.presentation
 
+import android.Manifest
+import android.content.Intent
+import android.net.Uri
+import android.os.Build
 import android.os.Bundle
+import android.os.Environment
+import android.provider.Settings
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.compose.animation.core.tween
@@ -9,6 +15,7 @@
 import androidx.compose.animation.slideInHorizontally
 import androidx.compose.animation.slideOutHorizontally
 import androidx.compose.material3.Text
+import androidx.core.app.ActivityCompat
 import androidx.lifecycle.lifecycleScope
 import androidx.navigation.NavType
 import androidx.navigation.compose.NavHost
@@ -27,7 +34,6 @@
 import com.example.notesapp.presentation.EditNote.EditNoteScreen
 
 
-
 @AndroidEntryPoint
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -92,6 +98,7 @@
             }
         }
     }
+
 }
 
 @Serializable
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n    alias(libs.plugins.kotlin.serialization)\r\n    alias(libs.plugins.kotlin.parcelize)\r\n    alias(libs.plugins.hilt.android)\r\n    id(\"kotlin-kapt\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.notesapp\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.notesapp\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n\r\n    implementation(libs.androidx.navigation.compose)\r\n    implementation(libs.kotlinx.serialization.json)\r\n\r\n    implementation(libs.androidx.room.common)\r\n    implementation(libs.androidx.room.ktx)\r\n    kapt(libs.androidx.room.compiler)\r\n\r\n    implementation(libs.hilt.android)\r\n    kapt(libs.hilt.compiler)\r\n    kapt(libs.dagger.compiler)\r\n\r\n    implementation(libs.hilt.navigation.compose)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 5ef8efb0b65169cb74c32aeb03cf389f19eef06b)
+++ b/app/build.gradle.kts	(date 1736357530459)
@@ -14,7 +14,7 @@
 
     defaultConfig {
         applicationId = "com.example.notesapp"
-        minSdk = 24
+        minSdk = 26
         targetSdk = 34
         versionCode = 1
         versionName = "1.0"
